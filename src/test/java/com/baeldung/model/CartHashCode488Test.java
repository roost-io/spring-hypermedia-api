// ********RoostGPT********
/*
Test generated by RoostGPT for test hypermedia-api using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=hashCode_306b64177c
ROOST_METHOD_SIG_HASH=hashCode_5a2657087a

"""
Scenario 1: Positive Test - With the 'books' list Initialized and 'purchased' set to true

Details:
  TestName: testHashcodeWithNonNullBooksAndPurchasedTrue
  Description: This test is to check the hashCode value when 'books' is not null and 'purchased' is true.
Execution:
  Arrange: Initialize 'books' list with some entries and set 'purchased' to true.
  Act: Invoke hashCode method.
  Assert: Compare the actual hashCode value with the expected value.
Validation:
  The assertion verifies that the hashCode value is correct when 'books' is not null and 'purchased' is true. This test is essential to ensure the unique identification of the object in a collection.

Scenario 2: Positive Test - With the 'books' list Initialized and 'purchased' set to false

Details:
  TestName: testHashcodeWithNonNullBooksAndPurchasedFalse
  Description: This test checks the hashCode value when 'books' is not null and 'purchased' is false.
Execution:
  Arrange: Initialize 'books' list with some entries and set 'purchased' to false.
  Act: Invoke the hashCode method.
  Assert: Assert both actual and expected hashCode value.
Validation:
  The assertion checks the correctness of the hashCode value when 'books' list is initialized and 'purchased' is false. It is important for the object identity in a collection.

Scenario 3: Negative Test - With 'books' list Null and 'purchased' set to true

Details:
  TestName: testHashcodeWithNullBooksAndPurchasedTrue
  Description: This test validates the hashCode value when 'books' is null and 'purchased' is true.
Execution:
  Arrange: Set 'books' list to null and 'purchased' to true.
  Act: Invoke hashCode method.
  Assert: Compare the actual and expected hashCode value.
Validation:
  The assertion confirms the expected hashCode value when 'books' is null and 'purchased' is true. This test ensures that the null condition of 'books' has been handled correctly.

Scenario 4: Negative Test - With 'books' list Null and 'purchased' set to false

Details:
  TestName: testHashcodeWithNullBooksAndPurchasedFalse
  Description: This test is to validate the hashCode value when 'books' is null and 'purchased' is false.
Execution:
  Arrange: Set 'books' list to null and 'purchased' to false.
  Act: Invoke hashCode method.
  Assert: Check that the actual and expected hashCode value matches.
Validation:
  The assertion is to confirm the expected hashCode value when 'books' is null and 'purchased' is false. This test ensures that the null condition of 'books' and false state of 'purchased' has been handled properly.
"""
*/

// ********RoostGPT********
package com.baeldung.model;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import java.util.ArrayList;
import java.util.List;

public class CartHashCode488Test {

	private Cart testCart;

	@Before
	public void setup() {
		testCart = new Cart();
	}

	@Test
	public void testHashcodeWithNonNullBooksAndPurchasedTrue() {
		Book book1 = new Book();
		book1.setAuthor("Author1");
		book1.setTitle("Title1");
		book1.setIsbn("ISBN1");
		Book book2 = new Book();
		book2.setAuthor("Author2");
		book2.setTitle("Title2");
		book2.setIsbn("ISBN2");

		testCart.add(book1);
		testCart.add(book2);
		testCart.setPurchased(true);

		int expectedHashCode = 31 * 1 + testCart.getBooks().hashCode();
		expectedHashCode = 31 * expectedHashCode + 1231;

		Assert.assertEquals(expectedHashCode, testCart.hashCode());
	}

	@Test
	public void testHashcodeWithNonNullBooksAndPurchasedFalse() {
		Book book1 = new Book();
		book1.setAuthor("Author1");
		book1.setTitle("Title1");
		book1.setIsbn("ISBN1");
		Book book2 = new Book();
		book2.setAuthor("Author2");
		book2.setTitle("Title2");
		book2.setIsbn("ISBN2");

		testCart.add(book1);
		testCart.add(book2);

		int expectedHashCode = 31 * 1 + testCart.getBooks().hashCode();
		expectedHashCode = 31 * expectedHashCode + 1237;

		Assert.assertEquals(expectedHashCode, testCart.hashCode());
	}

	@Test
	public void testHashcodeWithNullBooksAndPurchasedTrue() {
		testCart.setPurchased(true);

		int expectedHashCode = 31 * 1 + 0;
		expectedHashCode = 31 * expectedHashCode + 1231;

		Assert.assertEquals(expectedHashCode, testCart.hashCode());
	}

	@Test
	public void testHashcodeWithNullBooksAndPurchasedFalse() {

		int expectedHashCode = 31 * 1 + 0;
		expectedHashCode = 31 * expectedHashCode + 1237;

		Assert.assertEquals(expectedHashCode, testCart.hashCode());
	}

}
