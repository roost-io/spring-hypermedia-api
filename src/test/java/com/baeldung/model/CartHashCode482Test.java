// ********RoostGPT********
/*
Test generated by RoostGPT for test hypermedia-api using AI Type Open AI and AI Model gpt-4o

ROOST_METHOD_HASH=hashCode_79c7740116
ROOST_METHOD_SIG_HASH=hashCode_24d856d52f

```
Scenario 1: Hash code when books is null and purchased is false

Details:
  TestName: hashCodeBooksNullPurchasedFalse
  Description: This test checks the hash code calculation when the list of books is null and the purchased flag is false.
Execution:
  Arrange: Create an instance of the class with books set to null and purchased set to false.
  Act: Call the hashCode method.
  Assert: Use JUnit assertions to verify the hash code value.
Validation:
  Verify that the hash code is calculated correctly based on the given fields. This is important to ensure the consistency of hash codes for objects with similar state.

Scenario 2: Hash code when books is null and purchased is true

Details:
  TestName: hashCodeBooksNullPurchasedTrue
  Description: This test checks the hash code calculation when the list of books is null and the purchased flag is true.
Execution:
  Arrange: Create an instance of the class with books set to null and purchased set to true.
  Act: Call the hashCode method.
  Assert: Use JUnit assertions to verify the hash code value.
Validation:
  Verify that the hash code is calculated correctly based on the given fields. This is important to ensure the consistency of hash codes for objects with similar state.

Scenario 3: Hash code when books is empty and purchased is false

Details:
  TestName: hashCodeBooksEmptyPurchasedFalse
  Description: This test checks the hash code calculation when the list of books is empty and the purchased flag is false.
Execution:
  Arrange: Create an instance of the class with books set to an empty list and purchased set to false.
  Act: Call the hashCode method.
  Assert: Use JUnit assertions to verify the hash code value.
Validation:
  Verify that the hash code is calculated correctly based on the given fields. This is important to ensure the consistency of hash codes for objects with similar state.

Scenario 4: Hash code when books is empty and purchased is true

Details:
  TestName: hashCodeBooksEmptyPurchasedTrue
  Description: This test checks the hash code calculation when the list of books is empty and the purchased flag is true.
Execution:
  Arrange: Create an instance of the class with books set to an empty list and purchased set to true.
  Act: Call the hashCode method.
  Assert: Use JUnit assertions to verify the hash code value.
Validation:
  Verify that the hash code is calculated correctly based on the given fields. This is important to ensure the consistency of hash codes for objects with similar state.

Scenario 5: Hash code when books has one element and purchased is false

Details:
  TestName: hashCodeBooksOneElementPurchasedFalse
  Description: This test checks the hash code calculation when the list of books has one element and the purchased flag is false.
Execution:
  Arrange: Create an instance of the class with books set to a list containing one Book object and purchased set to false.
  Act: Call the hashCode method.
  Assert: Use JUnit assertions to verify the hash code value.
Validation:
  Verify that the hash code is calculated correctly based on the given fields. This is important to ensure the consistency of hash codes for objects with similar state.

Scenario 6: Hash code when books has one element and purchased is true

Details:
  TestName: hashCodeBooksOneElementPurchasedTrue
  Description: This test checks the hash code calculation when the list of books has one element and the purchased flag is true.
Execution:
  Arrange: Create an instance of the class with books set to a list containing one Book object and purchased set to true.
  Act: Call the hashCode method.
  Assert: Use JUnit assertions to verify the hash code value.
Validation:
  Verify that the hash code is calculated correctly based on the given fields. This is important to ensure the consistency of hash codes for objects with similar state.

Scenario 7: Hash code when books has multiple elements and purchased is false

Details:
  TestName: hashCodeBooksMultipleElementsPurchasedFalse
  Description: This test checks the hash code calculation when the list of books has multiple elements and the purchased flag is false.
Execution:
  Arrange: Create an instance of the class with books set to a list containing multiple Book objects and purchased set to false.
  Act: Call the hashCode method.
  Assert: Use JUnit assertions to verify the hash code value.
Validation:
  Verify that the hash code is calculated correctly based on the given fields. This is important to ensure the consistency of hash codes for objects with similar state.

Scenario 8: Hash code when books has multiple elements and purchased is true

Details:
  TestName: hashCodeBooksMultipleElementsPurchasedTrue
  Description: This test checks the hash code calculation when the list of books has multiple elements and the purchased flag is true.
Execution:
  Arrange: Create an instance of the class with books set to a list containing multiple Book objects and purchased set to true.
  Act: Call the hashCode method.
  Assert: Use JUnit assertions to verify the hash code value.
Validation:
  Verify that the hash code is calculated correctly based on the given fields. This is important to ensure the consistency of hash codes for objects with similar state.
```
*/

// ********RoostGPT********
package com.baeldung.model;

import java.util.ArrayList;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class CartHashCode482Test {

	@Test
	public void hashCodeBooksNullPurchasedFalse() {
		Cart cart = new Cart();
		cart.books = null;
		cart.purchased = false;

		int expectedHashCode = 31 * 1 + 1237;
		Assertions.assertEquals(expectedHashCode, cart.hashCode());
	}

	@Test
	public void hashCodeBooksNullPurchasedTrue() {
		Cart cart = new Cart();
		cart.books = null;
		cart.purchased = true;

		int expectedHashCode = 31 * 1 + 1231;
		Assertions.assertEquals(expectedHashCode, cart.hashCode());
	}

	@Test
	public void hashCodeBooksEmptyPurchasedFalse() {
		Cart cart = new Cart();
		cart.books = new ArrayList<Book>();
		cart.purchased = false;

		int expectedHashCode = 31 * cart.books.hashCode() + 1237;
		Assertions.assertEquals(expectedHashCode, cart.hashCode());
	}

	@Test
	public void hashCodeBooksEmptyPurchasedTrue() {
		Cart cart = new Cart();
		cart.books = new ArrayList<Book>();
		cart.purchased = true;

		int expectedHashCode = 31 * cart.books.hashCode() + 1231;
		Assertions.assertEquals(expectedHashCode, cart.hashCode());
	}

	@Test
	public void hashCodeBooksOneElementPurchasedFalse() {
		Cart cart = new Cart();
		List<Book> books = new ArrayList<>();
		books.add(new Book("Author", "Title", "ISBN"));
		cart.books = books;
		cart.purchased = false;

		int expectedHashCode = 31 * books.hashCode() + 1237;
		Assertions.assertEquals(expectedHashCode, cart.hashCode());
	}

	@Test
	public void hashCodeBooksOneElementPurchasedTrue() {
		Cart cart = new Cart();
		List<Book> books = new ArrayList<>();
		books.add(new Book("Author", "Title", "ISBN"));
		cart.books = books;
		cart.purchased = true;

		int expectedHashCode = 31 * books.hashCode() + 1231;
		Assertions.assertEquals(expectedHashCode, cart.hashCode());
	}

	@Test
	public void hashCodeBooksMultipleElementsPurchasedFalse() {
		Cart cart = new Cart();
		List<Book> books = new ArrayList<>();
		books.add(new Book("Author1", "Title1", "ISBN1"));
		books.add(new Book("Author2", "Title2", "ISBN2"));
		cart.books = books;
		cart.purchased = false;

		int expectedHashCode = 31 * books.hashCode() + 1237;
		Assertions.assertEquals(expectedHashCode, cart.hashCode());
	}

	@Test
	public void hashCodeBooksMultipleElementsPurchasedTrue() {
		Cart cart = new Cart();
		List<Book> books = new ArrayList<>();
		books.add(new Book("Author1", "Title1", "ISBN1"));
		books.add(new Book("Author2", "Title2", "ISBN2"));
		cart.books = books;
		cart.purchased = true;

		int expectedHashCode = 31 * books.hashCode() + 1231;
		Assertions.assertEquals(expectedHashCode, cart.hashCode());
	}

}
