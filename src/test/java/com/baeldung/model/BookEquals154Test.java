// ********RoostGPT********
/*
Test generated by RoostGPT for test hypermedia-api using AI Type Open AI and AI Model gpt-4o

ROOST_METHOD_HASH=equals_901bbf1981
ROOST_METHOD_SIG_HASH=equals_f4eca31364

``` 
Scenario 1: Check equality with the same object

Details:  
  TestName: checkEqualityWithSameObject
  Description: This test ensures that the equals method returns true when compared to the same object reference.
Execution:
  Arrange: Create a Book object.
  Act: Call the equals method on the same object.
  Assert: Verify that the method returns true.
Validation: 
  This assertion verifies that an object is always equal to itself, which is a fundamental property of the equals method.

Scenario 2: Check equality with null

Details:  
  TestName: checkEqualityWithNull
  Description: This test ensures that the equals method returns false when compared to a null object.
Execution:
  Arrange: Create a Book object.
  Act: Call the equals method with a null parameter.
  Assert: Verify that the method returns false.
Validation: 
  This assertion verifies that any object is not equal to null, which is a fundamental property of the equals method.

Scenario 3: Check equality with a different class object

Details:  
  TestName: checkEqualityWithDifferentClassObject
  Description: This test ensures that the equals method returns false when compared to an object of a different class.
Execution:
  Arrange: Create a Book object and an object of a different class.
  Act: Call the equals method with the different class object.
  Assert: Verify that the method returns false.
Validation: 
  This assertion verifies that objects of different classes are not considered equal.

Scenario 4: Check equality with another Book object with same field values

Details:  
  TestName: checkEqualityWithSameFieldValues
  Description: This test ensures that the equals method returns true when compared to another Book object with the same field values.
Execution:
  Arrange: Create two Book objects with identical field values for isbn, author, and title.
  Act: Call the equals method with the second Book object.
  Assert: Verify that the method returns true.
Validation: 
  This assertion verifies that two Book objects with the same field values are considered equal.

Scenario 5: Check equality with another Book object with different isbn

Details:  
  TestName: checkEqualityWithDifferentIsbn
  Description: This test ensures that the equals method returns false when compared to another Book object with a different isbn.
Execution:
  Arrange: Create two Book objects with different isbn values but identical author and title.
  Act: Call the equals method with the second Book object.
  Assert: Verify that the method returns false.
Validation: 
  This assertion verifies that two Book objects with different isbn values are not considered equal.

Scenario 6: Check equality with another Book object with different author

Details:  
  TestName: checkEqualityWithDifferentAuthor
  Description: This test ensures that the equals method returns false when compared to another Book object with a different author.
Execution:
  Arrange: Create two Book objects with different author values but identical isbn and title.
  Act: Call the equals method with the second Book object.
  Assert: Verify that the method returns false.
Validation: 
  This assertion verifies that two Book objects with different author values are not considered equal.

Scenario 7: Check equality with another Book object with different title

Details:  
  TestName: checkEqualityWithDifferentTitle
  Description: This test ensures that the equals method returns false when compared to another Book object with a different title.
Execution:
  Arrange: Create two Book objects with different title values but identical isbn and author.
  Act: Call the equals method with the second Book object.
  Assert: Verify that the method returns false.
Validation: 
  This assertion verifies that two Book objects with different title values are not considered equal.

Scenario 8: Check equality with both objects having null isbn

Details:  
  TestName: checkEqualityWithNullIsbn
  Description: This test ensures that the equals method returns true when both Book objects have null isbn values.
Execution:
  Arrange: Create two Book objects with null isbn values but identical author and title.
  Act: Call the equals method with the second Book object.
  Assert: Verify that the method returns true.
Validation: 
  This assertion verifies that two Book objects with null isbn values are considered equal if their other fields are equal.

Scenario 9: Check equality with both objects having null author

Details:  
  TestName: checkEqualityWithNullAuthor
  Description: This test ensures that the equals method returns true when both Book objects have null author values.
Execution:
  Arrange: Create two Book objects with null author values but identical isbn and title.
  Act: Call the equals method with the second Book object.
  Assert: Verify that the method returns true.
Validation: 
  This assertion verifies that two Book objects with null author values are considered equal if their other fields are equal.

Scenario 10: Check equality with both objects having null title

Details:  
  TestName: checkEqualityWithNullTitle
  Description: This test ensures that the equals method returns true when both Book objects have null title values.
Execution:
  Arrange: Create two Book objects with null title values but identical isbn and author.
  Act: Call the equals method with the second Book object.
  Assert: Verify that the method returns true.
Validation: 
  This assertion verifies that two Book objects with null title values are considered equal if their other fields are equal.
```
*/

// ********RoostGPT********
package com.baeldung.model;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonView;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

@Entity
public class Book {
    @Id
    @GeneratedValue
    private Long id;

    @Column
    private String isbn;

    @Column
    private String author;

    @Column
    private String title;

    @Column
    private String synopsis;

    @Column
    private String language;

    public Book() {
    }

    public Book(final String author, final String title, final String isbn) {
        this.author = author;
        this.title = title;
        this.isbn = isbn;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Book other = (Book) obj;
        if (author == null) {
            if (other.author != null)
                return false;
        } else if (!author.equals(other.author))
            return false;
        if (isbn == null) {
            if (other.isbn != null)
                return false;
        } else if (!isbn.equals(other.isbn))
            return false;
        if (title == null) {
            if (other.title != null)
                return false;
        } else if (!title.equals(other.title))
            return false;
        return true;
    }
}

// Test class should be in a separate file named BookEquals154Test.java
package com.baeldung.model;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class BookEquals154Test {

    @Test
    public void checkEqualityWithSameObject() {
        Book book = new Book("Author", "Title", "ISBN");
        assertTrue(book.equals(book));
    }

    @Test
    public void checkEqualityWithNull() {
        Book book = new Book("Author", "Title", "ISBN");
        assertFalse(book.equals(null));
    }

    @Test
    public void checkEqualityWithDifferentClassObject() {
        Book book = new Book("Author", "Title", "ISBN");
        String differentClassObject = "I am a string";
        assertFalse(book.equals(differentClassObject));
    }

    @Test
    public void checkEqualityWithSameFieldValues() {
        Book book1 = new Book("Author", "Title", "ISBN");
        Book book2 = new Book("Author", "Title", "ISBN");
        assertTrue(book1.equals(book2));
    }

    @Test
    public void checkEqualityWithDifferentIsbn() {
        Book book1 = new Book("Author", "Title", "ISBN1");
        Book book2 = new Book("Author", "Title", "ISBN2");
        assertFalse(book1.equals(book2));
    }

    @Test
    public void checkEqualityWithDifferentAuthor() {
        Book book1 = new Book("Author1", "Title", "ISBN");
        Book book2 = new Book("Author2", "Title", "ISBN");
        assertFalse(book1.equals(book2));
    }

    @Test
    public void checkEqualityWithDifferentTitle() {
        Book book1 = new Book("Author", "Title1", "ISBN");
        Book book2 = new Book("Author", "Title2", "ISBN");
        assertFalse(book1.equals(book2));
    }

    @Test
    public void checkEqualityWithNullIsbn() {
        Book book1 = new Book("Author", "Title", null);
        Book book2 = new Book("Author", "Title", null);
        assertTrue(book1.equals(book2));
    }

    @Test
    public void checkEqualityWithNullAuthor() {
        Book book1 = new Book(null, "Title", "ISBN");
        Book book2 = new Book(null, "Title", "ISBN");
        assertTrue(book1.equals(book2));
    }

    @Test
    public void checkEqualityWithNullTitle() {
        Book book1 = new Book("Author", null, "ISBN");
        Book book2 = new Book("Author", null, "ISBN");
        assertTrue(book1.equals(book2));
    }
}
